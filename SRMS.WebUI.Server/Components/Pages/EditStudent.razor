@page "/students/edit/{Id:guid}"
@using SRMS.Application.Students.GetStudentById
@using SRMS.Application.Students.UpdateStudent
@using SRMS.Application.Students.DTOs
@inject ISender Sender
@inject NavigationManager Navigation

<PageTitle>Edit Student</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
    <MudPaper Elevation="3" Class="pa-6">
        @if (_isLoading)
        {
            <div class="d-flex justify-center pa-8">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else if (_updateStudentDto == null)
        {
            <MudAlert Severity="Severity.Error">Student not found!</MudAlert>
        }
        else
        {
            <MudText Typo="Typo.h4" GutterBottom="true">Edit Student</MudText>
            
            <EditForm Model="@_updateStudentDto" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField 
                            Label="First Name" 
                            @bind-Value="_updateStudentDto.FirstName"
                            For="@(() => _updateStudentDto.FirstName)"
                            Variant="Variant.Outlined" />
                    </MudItem>
                    
                    <MudItem xs="12" sm="6">
                        <MudTextField 
                            Label="Last Name" 
                            @bind-Value="_updateStudentDto.LastName"
                            For="@(() => _updateStudentDto.LastName)"
                            Variant="Variant.Outlined" />
                    </MudItem>
                    
                    <MudItem xs="12">
                        <MudTextField 
                            Label="Email" 
                            @bind-Value="_updateStudentDto.Email"
                            For="@(() => _updateStudentDto.Email)"
                            Variant="Variant.Outlined"
                            InputType="InputType.Email" />
                    </MudItem>
                    
                    <MudItem xs="12">
                        <MudTextField 
                            Label="Phone Number" 
                            @bind-Value="_updateStudentDto.PhoneNumber"
                            For="@(() => _updateStudentDto.PhoneNumber)"
                            Variant="Variant.Outlined" />
                    </MudItem>
                    
                    <MudItem xs="12">
                        <MudTextField 
                            Label="Address" 
                            @bind-Value="_updateStudentDto.Address"
                            For="@(() => _updateStudentDto.Address)"
                            Variant="Variant.Outlined"
                            Lines="3" />
                    </MudItem>
                    
                    <MudItem xs="12" Class="d-flex gap-4">
                        <MudButton 
                            ButtonType="ButtonType.Submit" 
                            Variant="Variant.Filled" 
                            Color="Color.Primary"
                            Disabled="_isSubmitting">
                            @if (_isSubmitting)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ml-2">Updating...</MudText>
                            }
                            else
                            {
                                <MudText>Update Student</MudText>
                            }
                        </MudButton>
                        
                        <MudButton 
                            Variant="Variant.Outlined" 
                            Color="Color.Secondary"
                            Href="/students">
                            Cancel
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </EditForm>
            
            @if (_errorMessage != null)
            {
                <MudAlert Severity="Severity.Error" Class="mt-4">@_errorMessage</MudAlert>
            }
            
            @if (_successMessage != null)
            {
                <MudAlert Severity="Severity.Success" Class="mt-4">@_successMessage</MudAlert>
            }
        }
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    public Guid Id { get; set; }
    
    private UpdateStudentDto? _updateStudentDto;
    private bool _isLoading = true;
    private bool _isSubmitting = false;
    private string? _errorMessage;
    private string? _successMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadStudent();
    }

    private async Task LoadStudent()
    {
        _isLoading = true;
        try
        {
            var query = new GetStudentByIdQuery { Id = Id };
            var student = await Sender.Send(query);
            
            if (student != null)
            {
                _updateStudentDto = new UpdateStudentDto
                {
                    Id = student.Id,
                    FirstName = student.FirstName,
                    LastName = student.LastName,
                    Email = student.Email,
                    PhoneNumber = student.PhoneNumber,
                    Address = student.Address
                };
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading student: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleSubmit()
    {
        _isSubmitting = true;
        _errorMessage = null;
        _successMessage = null;

        try
        {
            var command = new UpdateStudentCommand { Student = _updateStudentDto! };
            var result = await Sender.Send(command);
            
            if (result != null)
            {
                _successMessage = "Student updated successfully!";
                await Task.Delay(1500);
                Navigation.NavigateTo("/students");
            }
            else
            {
                _errorMessage = "Student not found!";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error updating student: {ex.Message}";
        }
        finally
        {
            _isSubmitting = false;
        }
    }
}